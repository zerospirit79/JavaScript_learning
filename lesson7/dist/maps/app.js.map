{"version":3,"sources":["Board.js","Game.js","Main.js","Status.js"],"names":[],"mappingsfile":"../app.js","sourcesContent":["class Board {\r\n    constructor() {\r\n        this.gameTableElement = document.getElementById('game');\r\n    }\r\n\r\n    /**\r\n     * @param {Game} game \r\n     * @param {Status} status\r\n     */\r\n    init(game, status) {\r\n        this.game = game;\r\n        this.status = status;\r\n    }\r\n\r\n    /**\r\n     * Отрисовка игрового поля\r\n     */\r\n    renderMap() {\r\n        for (let row = 0; row < 3; row++) {\r\n            const tr = document.createElement('tr');\r\n            this.gameTableElement.appendChild(tr);\r\n            for (let col = 0; col < 3; col++) {\r\n                let td = document.createElement('td');\r\n                td.dataset.row = row.toString();\r\n                td.dataset.col = col.toString();\r\n                tr.appendChild(td);\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Инициализация обработчиков событий.\r\n     */\r\n    initEventHandlers() {\r\n        // Ставим обработчик, при клике на таблицу вызовется функция this.cellClickHandler.\r\n        this.gameTableElement.addEventListener('click', event => this.game.cellClickHandler(event));\r\n    }\r\n\r\n    /**\r\n     * Проверка что клик был по ячейке.\r\n     * @param {Event} event\r\n     * @param {HTMLElement} event.target\r\n     * @returns {boolean} Вернет true, если клик был по ячейке, иначе false.\r\n     */\r\n    isClickByCell(event) {\r\n        return event.target.tagName == 'TD';\r\n    }\r\n\r\n    /**\r\n     * Проверка что в ячейку не ставили значение (крестик или нолик).\r\n     * @param {Event} event\r\n     * @param {HTMLElement} event.target\r\n     * @returns {boolean} Вернет true, если ячейка пуста, иначе false.\r\n     */\r\n    isCellEmpty(event) {\r\n        // Получаем строку и колонку куда кликнули.\r\n        let row = +event.target.dataset.row;\r\n        let col = +event.target.dataset.col;\r\n\r\n        return this.status.mapValues[row][col] === '';\r\n    }\r\n\r\n    /**\r\n     * Заполняет ячейку в которую кликнул пользователь в событии event.\r\n     * @param {Event} event\r\n     * @param {HTMLElement} event.target\r\n     */\r\n    fillCell(event) {\r\n        // Получаем строку и колонку куда кликнули.\r\n        let row = +event.target.dataset.row;\r\n        let col = +event.target.dataset.col;\r\n\r\n        // Заполняем ячейку и ставим значение в массиве, в свойстве mapValues.\r\n        this.status.mapValues[row][col] = this.status.phase;\r\n        event.target.textContent = this.status.phase;\r\n    }\r\n}","class Game {\r\n\r\n    /**\r\n     * @param {Status} status \r\n     * @param {Board} board \r\n     */\r\n    init(status, board) {\r\n        this.status = status;\r\n        this.board = board;\r\n    }\r\n\r\n    /**\r\n     * Обработчик события клика.\r\n     * @param {MouseEvent} event\r\n     */\r\n    cellClickHandler(event) {\r\n        // Если клик не нужно обрабатывать, уходим из функции.\r\n        if (!this.isCorrectClick(event)) {\r\n            return;\r\n        }\r\n        this.board.fillCell(event);\r\n        if (this.hasWon()) {\r\n            // Ставим статус в \"остановлено\".\r\n            this.status.setStatusStopped();\r\n            // Сообщаем о победе пользователя.\r\n            this.sayWonPhrase();\r\n        }\r\n\r\n        // Меняем фигуру (крестик или нолик).\r\n        this.status.togglePhase();\r\n    }\r\n\r\n    /**\r\n     * Проверка был ли корректный клик, что описан в событии event.\r\n     * @param {Event} event\r\n     * @returns {boolean} Вернет true в случае если статус игры \"играем\", клик что описан в объекте event был\r\n     * по ячейке и ячейка куда был произведен клик был по пустой ячейке.\r\n     */\r\n    isCorrectClick(event) {\r\n        return this.status.isStatusPlaying() && this.board.isClickByCell(event) && this.board.isCellEmpty(event);\r\n    }\r\n\r\n    /**\r\n     * Проверка есть ли выигрышная ситуация на карте.\r\n     * @returns {boolean} Вернет true, если игра выиграна, иначе false.\r\n     */\r\n    hasWon() {\r\n        return this.isLineWon({ x: 0, y: 0 }, { x: 1, y: 0 }, { x: 2, y: 0 }) ||\r\n               this.isLineWon({ x: 0, y: 1 }, { x: 1, y: 1 }, { x: 2, y: 1 }) ||\r\n               this.isLineWon({ x: 0, y: 2 }, { x: 1, y: 2 }, { x: 2, y: 2 }) ||\r\n\r\n               this.isLineWon({ x: 0, y: 0 }, { x: 0, y: 1 }, { x: 0, y: 2 }) ||\r\n               this.isLineWon({ x: 1, y: 0 }, { x: 1, y: 1 }, { x: 1, y: 2 }) ||\r\n               this.isLineWon({ x: 2, y: 0 }, { x: 2, y: 1 }, { x: 2, y: 2 }) ||\r\n\r\n               this.isLineWon({ x: 0, y: 0 }, { x: 1, y: 1 }, { x: 2, y: 2 }) ||\r\n               this.isLineWon({ x: 0, y: 2 }, { x: 1, y: 1 }, { x: 2, y: 0 });\r\n    }\r\n\r\n    /**\r\n     * Проверка есть ли выигрышная ситуация на линии.\r\n     * @param {{x: int, y: int}} a 1-ая ячейка.\r\n     * @param {{x: int, y: int}} b 2-ая ячейка.\r\n     * @param {{x: int, y: int}} c 3-я ячейка.\r\n     * @returns {boolean} Вернет true, если линия выиграна, иначе false.\r\n     */\r\n    isLineWon(a, b, c) {\r\n        let value = this.status.mapValues[a.y][a.x] + this.status.mapValues[b.y][b.x] + this.status.mapValues[c.y][c.x];\r\n        return value === 'XXX' || value === '000';\r\n    }\r\n\r\n    /**\r\n     * Сообщает о победе.\r\n     */\r\n    sayWonPhrase() {\r\n        let figure = this.status.phase === 'X' ? 'Крестики' : 'Нолики';\r\n        alert(`${figure} выиграли!`);\r\n    }\r\n}","window.addEventListener('load', function() {\r\n    const game = new Game();\r\n    const board = new Board();\r\n    const status = new Status();\r\n\r\n    board.init(game, status);\r\n    game.init(status, board);\r\n\r\n    board.renderMap();\r\n    board.initEventHandlers();\r\n});","class Status {\r\n    constructor() {\r\n        this.status = 'playing';\r\n        this.mapValues = [\r\n            ['', '', ''],\r\n            ['', '', ''],\r\n            ['', '', ''],\r\n        ];\r\n        this.phase = 'X';\r\n    }\r\n\r\n    /**\r\n     * Проверка что мы \"играем\", что игра не закончена.\r\n     * @returns {boolean} Вернет true, статус игры \"играем\", иначе false.\r\n     */\r\n    isStatusPlaying() {\r\n        return this.status === 'playing';\r\n    }\r\n\r\n    /**\r\n     * Ставит статус игры в \"остановлена\".\r\n     */\r\n    setStatusStopped() {\r\n        this.status = 'stopped';\r\n    }\r\n\r\n    /**\r\n     * Меняет фигуру (крестик или нолик).\r\n     */\r\n    togglePhase() {\r\n        this.phase = this.phase === 'X' ? '0' : 'X';\r\n    }\r\n}"]}